---
title: "Solar Potential"
author: "Alan Jackson"
format: html
editor: visual
---

##      Use google solar api to get solar potential

# https://solar.googleapis.com/v1/buildingInsights:findClosest?location.latitude=37.4450&location.longitude=-122.1390&requiredQuality=HIGH&key=YOUR_API_KEY

```{r setup}

library(tidyverse)

googlekey <- readRDS("~/Dropbox/CrimeStats/apikey.rds")

path <- "/home/ajackson/Dropbox/Rprojects/TexasDioceseCreationCare/Data/"
output_path <- "/home/ajackson/Dropbox/projects/CeationCareTaskforce/solar/"

Parishes <- readRDS(paste0(path, "Parishes_plus_Census_tracts.rds"))

Parishes <- Parishes %>%
    mutate(long = unlist(map(Parishes$geometry,1)),
           lat = unlist(map(Parishes$geometry,2)))

Parishes[85,]$Description <- "204 Dooley St<br> Prairie View, TX 77446"

#token <- gargle::token_fetch()

```


##    Do a query

```{r a query}

urlreq <- "https://solar.googleapis.com/v1/buildingInsights:findClosest?location.latitude=29.7593&location.longitude=-95.35997&requiredQuality=HIGH&key=AIzaSyCh1BnxeyvbIqokI-T0UjvJorknlF4M6Eg"
# 29.759266944468134, -95.35997075905406
# result <- httr::GET(urlreq,
                    # httr::user_agent("Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0"))

req <- gargle::request_build(
  method = "GET",
  path = "v1/buildingInsights:findClosest",
  params = list(
    location.latitude = "29.69938",
    location.longitude = "-95.6566855",
    requiredQuality = "HIGH",
    key = googlekey
  ),
  base_url = "https://solar.googleapis.com"
)
# 29.699380402577543, -95.65668553384977
result <- gargle::request_make(req)
parse_result <- gargle::response_process(result)
parse_result_json <- gargle::response_as_json(result)

```

##  Query everyone

```{r all query}

BigHairyFile <- NULL

#   17 20 37 38 40 43 47 48 51 52 53 55 57 66 75 77,78,79,80,81,83,85-91,95,96,98,
#   105-107,112,113,115,116,118-120,126,129-131,133,135,137,138,141,144-146,148,149,
#   151,156-158

for (i in 48:nrow(Parishes)) {
  req <- gargle::request_build(
    method = "GET",
    path = "v1/buildingInsights:findClosest",
    params = list(
      location.latitude = as.character(Parishes[i,]$lat),
      location.longitude = as.character(Parishes[i,]$long),
      requiredQuality = "HIGH",
      key = googlekey
    ),
    base_url = "https://solar.googleapis.com"
  )
  
  result <- gargle::request_make(req)
  
  if (result[[2]] == "404") {next}
  
  parse_result <- gargle::response_process(result)
  
  foo <- tribble(~Label, ~City, ~Stuff,
                 Parishes[i,]$Label,
                 Parishes[i,]$City,
                 parse_result)
  
  BigHairyFile <- rbind(BigHairyFile, foo)
  
  Sys.sleep(15)
  print(i)
}

saveRDS(BigHairyFile, paste0(path, "BigHairyFile.rds"))


```

##        Misses

Lat longs are off for several churches. Will need to update them based on address.

```{r update addresses}

# https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=YOUR_API_KEY

BigHairyFile2 <- NULL

#   17 20 37 38 40 43 47 48 51 52 53 55 57 66 75 77,78,79,80,81,83,85-91,95,96,98,
#   105-107,112,113,115,116,118-120,126,129-131,133,135,137,138,141,144-146,148,149,
#   151,156-158

for (i in 144:nrow(Parishes)) {
 # Christ Church Cathedral<br>1117 Texas Avenue<br>Houston, TX 77002-3113<br>(713) 222-2593<br>christchurchcathedral.org (http://christchurchcathedral.org)
 
  Address <-  stringr::str_split(Parishes[i,]$Description, "<br>")[[1]][1:2]
  Address <- stringr::str_replace_all(stringr::str_flatten(Address, ","), " ", "+")
  
  req <- gargle::request_build(
    method = "GET",
    path = "maps/api/geocode/json",
    params = list(
      address = Address,
      key = googlekey
    ),
    base_url = "https://maps.googleapis.com"
  )
  
  result <- gargle::request_make(req)
  
  parse_result <- gargle::response_process(result)
  
  if (parse_result$status == "ZERO_RESULTS") {print(paste("---", i))
                                   next}
  
  foo <- tribble(~ID, ~Label, ~City, ~Lat, ~Long,
                 Parishes[i,]$ID,
                 Parishes[i,]$Label,
                 Parishes[i,]$City,
                 parse_result[["results"]][[1]][["geometry"]][["location"]][["lat"]],
                 parse_result[["results"]][[1]][["geometry"]][["location"]][["lng"]] )
  
  BigHairyFile2 <- rbind(BigHairyFile2, foo)
  
  Sys.sleep(5)
  print(i)
}

saveRDS(BigHairyFile2, paste0(path, "BigHairyFile2.rds"))

```

##    Look at new lat longs

Compare old and new lat long values and flag large differences

```{r compare}

foo <- left_join(BigHairyFile2, Parishes, by="ID")

#   Use 70 miles per degree latitude, 60 miles per degree longitude

foo <- foo %>% 
  mutate(distance = signif(sqrt(((lat-Lat)*70)**2 + ((long-Long)*60)**2)*5280, 3))

#   Clean up and create new Parishes file

foo <- foo %>% 
  filter(!Convocation=="North Region") %>% 
  select(ID, Label=Label.x, City=City.x, Lat=Lat, Long=Long, Name, Description, Convocation, County, geometry)

foo2 <- Parishes %>% 
  filter(Convocation=="North Region") %>% 
  select(ID, Label, City, Lat=lat, Long=long, Name, Description, Convocation, County, geometry)

foo3 <- Parishes %>% 
  filter(City=="Leigh") %>% 
  select(ID, Label, City, Lat=lat, Long=long, Name, Description, Convocation, County, geometry) %>% 
  mutate(Lat = 32.603995696702974, Long = -94.13940369484152)
  
NewParishes <- bind_rows(foo, foo2, foo3) %>% 
  arrange(Convocation)

#   Need to redo geometry, and then redo intersection with census data

NewParishes <- NewParishes %>% 
  sf::st_drop_geometry() %>% 
  sf::st_as_sf(coords=c("Long", "Lat"), crs=googlecrs, agr="identity")

#   Individual fix (All Saint's Austin)

TempParish <- NewParishes %>%
    mutate(long = unlist(map(NewParishes$geometry,1)),
           lat = unlist(map(NewParishes$geometry,2)))

TempParish[1,]$long <- -97.73974474010639
TempParish[1,]$lat  <- 30.291669709186706

NewParishes <- TempParish %>% 
  sf::st_drop_geometry() %>% 
  sf::st_as_sf(coords=c("long", "lat"), crs=googlecrs, agr="identity")

#   Save the data

saveRDS(NewParishes, paste0(path, "Parishes.rds"))

```

##  Query everyone again

```{r all query}

BigHairyFile <- NULL

TempParish <- NewParishes %>%
    mutate(long = unlist(map(NewParishes$geometry,1)),
           lat = unlist(map(NewParishes$geometry,2)))

#   It appears that these areas have not been processed by Google yet

#   3,4,6,9,14,15,20,21,24,26,27,28,30,32-38,68,73,74,75,78,80,81,83,87,88,91,94,95,
#   97-100,106,109,110,118,120,121,127,129-131,134,135,139,140,142,144,157

for (i in 1:nrow(TempParish)) {
  req <- gargle::request_build(
    method = "GET",
    path = "v1/buildingInsights:findClosest",
    params = list(
      location.latitude = as.character(TempParish[i,]$lat),
      location.longitude = as.character(TempParish[i,]$long),
      requiredQuality = "HIGH",
      key = googlekey
    ),
    base_url = "https://solar.googleapis.com"
  )
  
  result <- gargle::request_make(req)
  
  if (result[[2]] == "404") {next}
  
  parse_result <- gargle::response_process(result)
  
  foo <- tribble(~Label, ~City, ~Stuff,
                 TempParish[i,]$Label,
                 TempParish[i,]$City,
                 parse_result)
  
  BigHairyFile <- rbind(BigHairyFile, foo)
  
  Sys.sleep(5)
  print(i)
}

saveRDS(BigHairyFile, paste0(path, "BigHairyFile.rds"))


```

##       What do I want from the file?

```{r pick stuff from file}

foo <- BigHairyFile[1,]$Stuff

foo[[1]][["solarPotential"]][["maxArrayPanelsCount"]]
foo[[1]][["solarPotential"]][["maxSunshineHoursPerYear"]]
foo[[1]][["solarPotential"]][["solarPanelConfigs"]][[1]][["panelsCount"]]
foo[[1]][["solarPotential"]][["solarPanelConfigs"]][[1]][["yearlyEnergyDcKwh"]]
foo[[1]][["solarPotential"]][["solarPanelConfigs"]][[2]][["panelsCount"]]
foo[[1]][["solarPotential"]][["solarPanelConfigs"]][[2]][["yearlyEnergyDcKwh"]]
foo[[1]][["solarPotential"]][["financialAnalyses"]][[1]][["cashPurchaseSavings"]][["outOfPocketCost"]][["units"]]
foo[[1]][["solarPotential"]][["financialAnalyses"]][[1]][["cashPurchaseSavings"]][["savings"]][["savingsLifetime"]][["units"]]
foo[[1]][["solarPotential"]][["financialAnalyses"]][[1]][["cashPurchaseSavings"]][["savings"]][["savingsLifetime"]][["units"]]

length(foo[[1]][["solarPotential"]][["financialAnalyses"]])

foobar <- tribble(~Index, ~Cost, ~Savings, ~InitialKwhPerYear, ~PaybackYrs)
for (i in 1:length(foo[[1]][["solarPotential"]][["financialAnalyses"]])) {
  Finance <- foo[[1]][["solarPotential"]][["financialAnalyses"]][[i]]
  Cost <- Finance[["cashPurchaseSavings"]][["outOfPocketCost"]][["units"]]
  PaybackYrs <- Finance[["cashPurchaseSavings"]][["paybackYears"]]
  Savings <- Finance[["cashPurchaseSavings"]][["savings"]][["savingsLifetime"]][["units"]]
  InitialKwhPerYear <- Finance[["financialDetails"]][["initialAcKwhPerYear"]]
  Index <- Finance[["panelConfigIndex"]]
  print(paste(Index, Cost, Savings, InitialKwhPerYear, PaybackYrs))
  foobar <- bind_rows(foobar, tribble(~Index, ~Cost, ~Savings, ~InitialKwhPerYear, ~PaybackYrs, 
                                       Index, Cost, Savings, InitialKwhPerYear, PaybackYrs))
}

foobar2 <- tribble(~Index, ~PanelCount, ~YearlyDcKwh) 
for (i in 1:length(foo[[1]][["solarPotential"]][["solarPanelConfigs"]])) {
  Config <- foo[[1]][["solarPotential"]][["solarPanelConfigs"]][[i]]
  PanelCount <- Config[["panelsCount"]]
  YearlyDcKwh <- Config[["yearlyEnergyDcKwh"]]
  print(paste(i, PanelCount, YearlyDcKwh))
  foobar2 <- bind_rows(foobar2, tribble(~Index, ~PanelCount, ~YearlyDcKwh, 
                                       i-1, PanelCount, YearlyDcKwh))
}

#   Combine financials with number of panels

foobar <- left_join(foobar, foobar2, by="Index")

#   Get a few more numbers

MaxArray <- foo[[1]][["solarPotential"]][["maxArrayPanelsCount"]]
MaxSunHoursPerYear <- foo[[1]][["solarPotential"]][["maxSunshineHoursPerYear"]]

foobar %>% 
  ggplot(aes(x=PanelCount, y=YearlyDcKwh)) +
  geom_point() +
  geom_smooth()

foobar %>% 
  select(PanelCount, Cost, Savings) %>% 
  mutate(Cost=as.numeric(Cost), Savings=as.numeric(Savings)) %>% 
  pivot_longer(!PanelCount, names_to="Financials", values_to = "Dollars") %>%  
  ggplot(aes(x=PanelCount, y=Dollars, color=Financials)) +
  geom_point() +
  geom_smooth() 

foobar %>% 
  select(PanelCount, Cost, Savings) %>% 
  mutate(Cost=as.numeric(Cost), Savings=as.numeric(Savings)) %>% 
  mutate(PctSavings=Savings/Cost) %>% 
  #pivot_longer(!PanelCount, names_to="Financials", values_to = "Dollars") %>%  
  ggplot(aes(x=PanelCount, y=PctSavings)) +
  geom_point() +
  geom_smooth() 

foobar %>% 
  filter(PaybackYrs>0) %>% 
  select(PanelCount, PaybackYrs) %>% 
  ggplot(aes(x=PanelCount, y=PaybackYrs)) +
  geom_point() +
  geom_smooth() 

```

##        Make a big dataframe with all the stuff I want













