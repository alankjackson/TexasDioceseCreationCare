---
title: "Test Building footprint from OSM"
author: "Alan Jackson"
format: html
editor: source
---

## setup

```{r setup, include=FALSE}

library(tidyverse)

google_crs <- "EPSG:4326" # lat long

path <- "/home/ajackson/Dropbox/Rprojects/TexasDioceseCreationCare/Data/"
out_path <- "/home/ajackson/Dropbox/projects/CeationCareTaskforce/Maps_and_tables/Risk/"

Parishes <- read_rds(paste0(path, "Parishes.rds")) 

Churches <-  Parishes %>% 
  sf::st_drop_geometry()




# bbox <- osmdata::getbb(place_name = "Houston")

knitr::opts_chunk$set(echo = TRUE)
```


##        Look for stuff

```{r}

#   What features are available?
osmdata::available_features()
#   What tags are available?
osmdata::available_tags("building") 
osmdata::available_tags("boundary") 

Parishes_new <- Parishes %>% mutate(area=0)
for (i in 1:nrow(Parishes)){
  print(paste("--->", i))
  
  Addr <- paste0(stringr::str_extract(Parishes[i,]$Description, "^[ \\w]*"),
                 ", ", Parishes[i,]$City)
  foo <- tmaptools::geocode_OSM(Addr)
  
  
  lon <- sf::st_coordinates(Parishes[i,])[1]
  lat <- sf::st_coordinates(Parishes[i,])[2]
  
  print(paste("lat long diff", lat-foo$coords["y"], lon-foo$coords["x"]))
  
  bbox <- matrix(c(sf::st_coordinates(Parishes[i,])-0.001,  
                   sf::st_coordinates(Parishes[i,])+0.001), nrow=2)
  rownames(bbox) <- c("x", "y")
  colnames(bbox) <- c("min", "max")
  
  # polys <- opq_enclosing (lon, lat, key='building', value="yes") %>%
  polys <- opq_enclosing (lon, lat) %>%
    opq_string () %>%
    osmdata_sf ()
  
  if (!is.null(polys$osm_polygons$building)) {
    church <- polys$osm_polygons %>% filter(!is.na(building)) 
    
    area <- sf::st_area(church)
    print(church$name) 
    # church$'addr:street' 
    # church$'addr:postcode' 
    Parishes_new[i,]$area <- units::drop_units(area)*10.7639
  }
  
  
  
  #################################################
  # church_all <-
    foo <-
  bbox %>%
  osmdata::opq(timeout = 50) %>% # Build query
  # osmdata::add_osm_feature(key = "amenity",
  osmdata::add_osm_feature(key = "building"#,
  #                          value = "church"
                           # value = "place_of_worship"
                            ) %>%
  osmdata::osmdata_sf(quiet=FALSE) # turn into an sf file
  # 
  
  
  # polys <- opq_enclosing (lon, lat, 'building') %>%
  #   opq_string () %>%
  #   osmdata_sf ()
  # 
  # church <- church_all$osm_polygons
  # area <- sf::st_area(church)
  # print(church$name) 
  # # church$'addr:street' 
  # # church$'addr:postcode' 
  # Parishes_new[i,]$area <- units::drop_units(area)*10.7639
    
} 

write_rds(Parishes_new, paste0(path, "Church_areas.rds"))

leaflet::leaflet() %>%
  leaflet::addTiles() %>% # OpenStreetMap by default
  leaflet::addPolygons(data=church_all$osm_polygons,
                   opacity=0.4,
                   fillOpacity = 0.4) #%>% 
  leaflet::addPolygons(data=sf::st_transform(ACS,crs=google_crs),
                       opacity=5,
                       fillOpacity=0,
                       color="red",
                       weight=1)
  

```
##        Build a box

```{r}

keep <- Parishes_new

for (i in 91:nrow(Parishes)){
  if (Parishes_new[i,]$area>0) {next}
  print(paste("--->", i))
  
  lon <- sf::st_coordinates(Parishes[i,])[1]
  lat <- sf::st_coordinates(Parishes[i,])[2]
  
  bbox <- matrix(c(sf::st_coordinates(Parishes[i,])-0.0003,  
                   sf::st_coordinates(Parishes[i,])+0.0003), nrow=2)
  rownames(bbox) <- c("x", "y")
  colnames(bbox) <- c("min", "max")
  
  #################################################
  # church_all <-
    foo1 <-
  bbox %>%
  osmdata::opq(timeout = 50) %>% # Build query
  osmdata::add_osm_feature(key = "amenity",
                           value = "place_of_worship"
                            ) 
    foo2 <-
  bbox %>%
  osmdata::opq(timeout = 50) %>% # Build query
  osmdata::add_osm_feature(key = "building",
                           value = "church"
                          )  
    ##  OR
  foo <- c(
  osmdata::osmdata_sf(foo1, quiet=FALSE), # turn into an sf file
  osmdata::osmdata_sf(foo2, quiet=FALSE) # turn into an sf file
  )
  
  if (!is.null(foo$osm_polygons$building)) {
    church <- foo$osm_polygons %>% filter(!is.na(building))

    area <- sf::st_area(church)
    print(church$name)
    # church$'addr:street'
    # church$'addr:postcode'
    Parishes_new[i,]$area <- units::drop_units(area)*10.7639
  }
  # ##############################
  
  
#   polys <- opq_enclosing (lon, lat, 'building') %>%
#     opq_string () %>%
#     osmdata_sf ()
#   
#   if (!is.null(polys$osm_multipolygons$building)) {
#     church <- polys$osm_multipolygons %>% filter(!is.na(building)) 
#     
#     area <- sf::st_area(church)
#     print(church$name) 
#     # church$'addr:street' 
#     # church$'addr:postcode' 
#     Parishes_new[i,]$area <- units::drop_units(area)*10.7639
#   }
#   # church <- church_all$osm_polygons
#   # area <- sf::st_area(church)
#   # print(church$name) 
#   # # church$'addr:street' 
#   # # church$'addr:postcode' 
#   # Parishes_new[i,]$area <- units::drop_units(area)*10.7639
#   
# leaflet::leaflet() %>%
#   leaflet::addTiles() %>% # OpenStreetMap by default
#   leaflet::addPolygons(data=foo$osm_polygons,
#                    opacity=0.4,
#                    fillOpacity = 0.4) #%>%
#   leaflet::addPolygons(data=sf::st_transform(ACS,crs=google_crs),
#                        opacity=5,
#                        fillOpacity=0,
#                        color="red",
#                        weight=1)
      
} 
```


##        reprex

```{r}

library(osmdata)

  lon <- sf::st_coordinates(Parishes[8,])[1]
  lat <- sf::st_coordinates(Parishes[8,])[2]
  
  bbox <- matrix(c( -97.80317, 
                     30.19829,  
                    -97.80117, 
                     30.20029), nrow=2)
  rownames(bbox) <- c("x", "y")
  colnames(bbox) <- c("min", "max")
  
  bbox %>% 
  osmdata::opq(timeout = 50) %>% # Build query
  # osmdata::add_osm_feature(key = "amenity",
  #                          value = "place_of_worship"
  #                           ) %>% 
  osmdata::add_osm_feature(key = "building",
                           value = "yes"
                            ) %>% 
  osmdata::osmdata_sf(quiet=FALSE) 
  
  polys <- opq_enclosing (lon, lat, key='building', value="yes") %>%
    opq_string () %>%
    osmdata_sf ()
  
  polys$osm_polygons %>% filter(building=='yes')
  
```

## read in and process data from qgis

```{r}

Buildings <- sf::st_read(paste0(path, "Buildings/SelectedBuildings_3LL.shp"))

Buildings <- sf::st_make_valid(Buildings)

#   make a diagnostic map

tmap::tmap_options(basemaps="OpenStreetMap")

tmap::tmap_mode("view") # set mode to interactive plots

tmap::tm_shape(Buildings) + 
  tmap::tmap_options(check.and.fix = TRUE) +
    #tmap::tm_sf(col="ConvoColor", alpha=0.3) +
  tmap::tm_fill(col = "red", title = "Selected Buildings", alpha=0.3, style="pretty")+
  tmap::tm_borders(lwd=0.5) +
    tmap::tm_shape(Parishes) + 
  tmap::tm_dots()

#   Intersect with Parish locations to add that data





```

##        Calculate areas

```{r}

foo <- 
Buildings %>% 
  filter(!is.na(ID))  

area <- units::drop_units(sf::st_area(foo))*10.7639 

foo <- cbind(foo, area)

foo <- foo %>% 
  group_by(ID) %>% 
  summarise(area=sum(area), Label=first(Label), City=first(City))

```

